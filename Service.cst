<%@ CodeTemplate Language="C#" TargetLanguage="C#" Encoding="utf-8" Debug="True"  %>

<%@ Property Name="ClassName" Optional="False" Type="System.String" Category="基本信息" Description="类名称" %>
<%@ Property Name="ClassNameSpace" Optional="False" Type="System.String" Category="基本信息" Description="命名空间" %>
<%@ Property Name="ModelNameSpace" Optional="False" Type="System.String" Category="基本信息" Description="模型层命名空间" %>
<%@ Property Name="FrameworkNameSpace" Optional="False" Type="System.String" Category="基本信息" Description="基础设施层命名空间" %>
<%@ Property Name="RepositoryNameSpace" Optional="False" Type="System.String" Category="命名空间" Description="仓储命名空间" %>
<%@ Property Name="HasApproval" Optional="False" Type="System.Boolean" Category="选项" Description="审批" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="C#系统类型图" %>
<%-- 注册要生成的模板 --%>
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using <%= this.FrameworkNameSpace%>;
using <%= this.ModelNameSpace%>;

namespace <%= this.ClassNameSpace%>
{
    <%--生成制定表的实体类--%>
    public  class <%= this.ClassName%>Service :I<%= this.ClassName%>Service
    {
    
        #region 字段

        private I<%= this.ClassName%>Repository _currentRep;

        #endregion
        
        #region 属性
        
        #endregion
                
        #region 构造函数
        public <%= this.ClassName%>Service(I<%= this.ClassName%>Repository currentRep)
        {
            _currentRep = currentRep;
        }
        #endregion
    
        #region 查询
        public <%= this.ClassName%> Get<%= this.ClassName%>(Guid guid){
        
            throw new NotImplementedException();
        }
        public <%= this.ClassName%>Dto Get<%= this.ClassName%>Dto(Guid guid){
        
            throw new NotImplementedException();
        }
        
        #endregion
        
        #region 操作
        
        
        #endregion
        
        <% if(this.HasApproval){ %>
          #region 审批
        /// <summary>
        /// 提交审批
        /// </summary>
        /// <param name="businessGuid">业务GUID</param>
        /// <param name="isFormWorkFlow">是否为工作流审批</param>
        public void SubmitApprove(Guid businessGuid, bool isFormWorkFlow = false)
        {
            ChangeDataWhenApprove(businessGuid, TPSApproveAction.SubmitApprove, isFormWorkFlow);
        }
        /// <summary>
        /// 发起审批
        /// </summary>
        /// <param name="businessGuid">业务GUID</param>
        /// <param name="isFormWorkFlow">是否为工作流审批</param>
        public void LaunchApprove(Guid businessGuid, bool isFormWorkFlow = false)
        {
            ChangeDataWhenApprove(businessGuid, TPSApproveAction.LaunchApprove, isFormWorkFlow);
        }
        /// <summary>
        /// 审批通过
        /// </summary>
        /// <param name="businessGuid">业务GUID</param>
        /// <param name="isFormWorkFlow">是否为工作流审批</param>
        public void ApprovePass(Guid businessGuid, bool isFormWorkFlow = false)
        {
            ChangeDataWhenApprove(businessGuid, TPSApproveAction.ApprovePass, isFormWorkFlow);
        }
        /// <summary>
        /// 审批驳回
        /// </summary>
        /// <param name="businessGuid">业务GUID</param>
        /// <param name="isFormWorkFlow">是否为工作流审批</param>
        public void ApproveReject(Guid businessGuid, bool isFormWorkFlow = false)
        {
            ChangeDataWhenApprove(businessGuid, TPSApproveAction.ApproveReject, isFormWorkFlow);
        }
        
         /// <summary>
        /// 审批是改变业务数据
        /// </summary>
        /// <param name="businessGUID">业务GUID</param>
        /// <param name="approveAction">审批动作(枚举)</param>
        /// <param name="isFromWorkFlow">是否为工作流审批</param>
        private void ChangeDataWhenApprove(Guid businessGUID, TPSApproveAction approveAction, bool isFromWorkFlow)
        {
            var entity = _currentRep.GetById(businessGUID);
            if (entity == null)
                throw new DataVerificationException("[业务数据]不存在或已被删除！");
            //更多的验证...    
            if (approveAction == TPSApproveAction.ApprovePass)
            {
                if (!isFromWorkFlow)
                    entity.ApproveBy = SessionOperator.UserName;
                entity.ApproveDate = DateTime.Now;
            }
            else if (approveAction == TPSApproveAction.ApproveReject)
            {
                entity.ApproveBy = string.Empty;
                entity.ApproveDate = null;
            }
            ChangeApproveStatus(entity, approveAction);
        }

        /// <summary>
        /// 改变审批状态
        /// </summary>
        /// <param name="entity">业务数据实体</param>
        /// <param name="approveAction">审批动作 （枚举）</param>
        private void ChangeApproveStatus(<%=this.ClassName%> entity, TPSApproveAction approveAction)
        {
            switch (approveAction)
            {
                case TPSApproveAction.SubmitApprove:
                case TPSApproveAction.LaunchApprove:
                    if (entity.ApproveStatus != ApproveStatus.UnApprove.GetDescription())
                        throw new DataVerificationException("当前[业务数据]不处于未审核,无法提交审批！");
                    //更多的验证...
                    entity.ApproveStatus = ApproveStatus.Approving.GetDescription();
                    break;
                case TPSApproveAction.ApprovePass:
                    if (entity.ApproveStatus != ApproveStatus.Approving.GetDescription())
                        throw new DataVerificationException("当前[业务数据]不处于审核中,无法审批通过！");
                    //更多的验证...
                    entity.ApproveStatus = ApproveStatus.Approved.GetDescription();
                    break;
                case TPSApproveAction.ApproveReject:
                    if (entity.ApproveStatus == ApproveStatus.UnApprove.GetDescription())
                        throw new DataVerificationException("当前[业务数据]处于未审核,无需审批驳回！");
                    //更多的验证...
                    entity.ApproveStatus = ApproveStatus.UnApprove.GetDescription();
                    break;
                default:
                    break;
            }
        }
        #endregion   
       <%  }  %>
        #region 辅助
        
        
        #endregion
    }
}


